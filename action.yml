# Copyright The Helm Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: "Helm OCI Charts Releaser for Gitea"
description: "Publish multiple Helm charts into an OCI registry"
author: "thpham"
branding:
  color: blue
  icon: anchor
inputs:
  gitea_server:
    description: "The base url of the gitea API (default: https://gitea.com)"
    required: true
    default: https://gitea.com
  version:
    description: "The Helm version to use (default: v3.14.1)"
    required: false
    default: v3.14.1
  tea_version:
    description: "The Tea version to use (default: 0.9.2)"
    required: false
    default: 0.9.2
  charts_dir:
    description: The chart(s) directory
    required: false
  oci_registry:
    description: The OCI registry host
    required: true
  oci_username:
    description: The username used to login to the OCI registry
    required: true
  oci_password:
    description: The OCI user's password
    required: true
  gitea_token:
    description: Gitea Actions token must be provided to manage release creation and update
    required: true
  install_dir:
    description: "Helm installation directory"
    required: false
  skip_helm_install:
    description: "Just install helm tool and don't release any charts"
    required: false
  skip_tea_install:
    description: "Just install tea tool"
    required: false
  skip_dependencies:
    description: "Skip dependency update during packaging"
    required: false
  skip_existing:
    description: "Skip the chart package upload if the Gitea release exists"
    required: false
  tag_name_pattern:
    description: "Specifies Gitea repository release naming pattern (ex. '{chartName}-chart')"
    required: false
outputs:
  changed_charts:
    description: "A comma-separated list of charts that were released on this run. Will be an empty string if no updates were detected, will be unset if `--skip_packaging` is used: in the latter case your custom packaging step is responsible for setting its own outputs if you need them."
    value: ${{ steps.release.outputs.changed_charts }}
  chart_version:
    description: "The version of the most recently generated charts; will be set even if no charts have been updated since the last run."
    value: ${{ steps.release.outputs.chart_version }}

runs:
  using: composite
  steps:
    - id: release
      run: |
        if [[ -n "${{ inputs.gitea_server }}" ]]; then
          args+=(--server-url "${{ inputs.gitea_server }}")
        fi

        if [[ -n "${{ inputs.version }}" ]]; then
          args+=(--version "${{ inputs.version }}")
        fi

        if [[ -n "${{ inputs.charts_dir }}" ]]; then
          args+=(--charts-dir "${{ inputs.charts_dir }}")
        fi

        if [[ -n "${{ inputs.oci_registry }}" ]]; then
          args+=(--oci-registry "${{ inputs.oci_registry }}")
        fi

        if [[ -n "${{ inputs.oci_username }}" ]]; then
          args+=(--oci-username "${{ inputs.oci_username }}")
        fi

        if [[ -n "${{ inputs.install_dir }}" ]]; then
          args+=(--install-dir "${{ inputs.install_dir }}")
        fi

        if [[ -n "${{ inputs.skip_helm_install }}" ]]; then
            args+=(--skip-helm-install "${{ inputs.skip_helm_install }}")
        fi

        if [[ -n "${{ inputs.skip_tea_install }}" ]]; then
            args+=(--skip-tea-install "${{ inputs.skip_tea_install }}")
        fi

        if [[ -n "${{ inputs.skip_dependencies }}" ]]; then
            args+=(--skip-dependencies "${{ inputs.skip_dependencies }}")
        fi

        if [[ -n "${{ inputs.skip_existing }}" ]]; then
            args+=(--skip-existing "${{ inputs.skip_existing }}")
        fi

        if [[ -n "${{ inputs.tag_name_pattern }}" ]]; then
            args+=(--tag-name-pattern "${{ inputs.tag_name_pattern }}")
        fi

        export GITEA_TOKEN="${{ inputs.gitea_token }}"
        export OCI_PASSWORD="${{ inputs.oci_password }}"
        "$GITHUB_ACTION_PATH/cr.sh" "${args[@]}"

        if [[ -f changed_charts.txt ]]; then
            cat changed_charts.txt >> "$GITHUB_OUTPUT"
        fi
        if [[ -f chart_version.txt ]]; then
            cat chart_version.txt >> "$GITHUB_OUTPUT"
        fi
        rm -f changed_charts.txt chart_version.txt
      shell: bash
